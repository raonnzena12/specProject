CREATE TABLE MOBILE (
	MO_NO	NUMBER		NOT NULL,
	MO_CODE	VARCHAR2(100)		NOT NULL,
	MO_NAME	VARCHAR2(100)		NOT NULL,
	MO_BRANDCODE	NUMBER		NOT NULL
);

CREATE TABLE BRAND (
	BRAND_CODE	NUMBER		NOT NULL,
	BRAND_NAME	VARCHAR2(100)		NOT NULL
);

CREATE TABLE OS (
	OS_CODE	NUMBER		NOT NULL,
	OS_NAME	VARCHAR2(100)		NOT NULL
);

CREATE TABLE BATTERY (
	BAT_CODE	NUMBER		NOT NULL,
	MIN_BATTERY	NUMBER		NOT NULL,
	MAX_BATTERY	NUMBER		NOT NULL
);

CREATE TABLE USER (
	USER_NO	number		NOT NULL,
	USER_EMAIL	VARCHAR2(100)		NOT NULL,
	USER_PWD	VARCHAR2(100)		NOT NULL,
	USER_NAME	VARCHAR2(100)		NOT NULL,
	USER_PHONE	VARCHAR2(100)		NULL,
	USER_ENDATE	date	DEFAULT SYSDATE	NOT NULL,
	USER_MDDATE	date	DEFAULT SYSDATE	NOT NULL,
	USER_EVENT	VARCHAR2(100)		NOT NULL,
	USER_VERIFY	number	DEFAULT 0	NULL,
	USER_STATUS	number		NOT NULL,
	USER_MNO	NUMBER		NULL
);

CREATE TABLE BOARD (
	BNO	NUMBER		NOT NULL,
	BTITLE	VARCHAR2(100)		NOT NULL,
	BCONTENT	CLOB		NOT NULL,
	BCOUNT	NUMBER	DEFAULT 0	NOT NULL,
	BREGDATE	DATE	DEFAULT SYSDATE	NOT NULL,
	BMODIDATE	DATE	DEFAULT SYSDATE	NOT NULL,
	BCODE	NUMBER		NOT NULL,
	BWRITER	number		NOT NULL,
	BSTATUS	NUMBER		NOT NULL
);

CREATE TABLE COMMENT (
	CNO	NUMBER		NOT NULL,
	CCONTENT	VARCHAR2(4000)		NOT NULL,
	CREGDATE	DATE	DEFAULT SYSDATE	NOT NULL,
	CMODIDATE	DATE	DEFAULT SYSDATE	NOT NULL,
	CWRITER	NUMBER		NOT NULL,
	CSTATUS	NUMBER		NOT NULL,
	BNO	NUMBER		NOT NULL
);

CREATE TABLE SUBCOMMENT (
	SNO	NUMBER		NOT NULL,
	SCONTENT	VARCHAR2(4000)		NOT NULL,
	SREGDATE	DATE	DEFAULT SYSDATE	NOT NULL,
	SMODIDATE	DATE	DEFAULT SYSDATE	NOT NULL,
	SWRITER	NUMBER		NOT NULL,
	SSTATUS	NUMBER		NOT NULL,
	CNO	NUMBER		NOT NULL
);

CREATE TABLE REVIEW (
	RE_NO	NUMBER		NOT NULL,
	RE_TITLE	VARCHAR2(100)		NOT NULL,
	RE_CONTENT	clob		NOT NULL,
	RE_STAR	NUMBER	DEFAULT 2.5	NOT NULL,
	RE_REGDATE	DATE	DEFAULT SYSDATE	NOT NULL,
	RE_MODIDATE	DATE	DEFAULT SYSDATE	NOT NULL,
	RE_LIKE	NUMBER	DEFAULT 0	NOT NULL,
	RE_WRITER	NUMBER		NOT NULL,
	RE_MNO	NUMBER		NOT NULL,
	RE_STATUS	NUMBER		NOT NULL
);

CREATE TABLE COMPARE (
	COM_NO	NUMBER		NOT NULL,
	COM_COUNT	NUMBER	DEFAULT 0	NOT NULL,
	COM_MNO1	NUMBER		NOT NULL,
	COM_MNO2	NUMBER		NOT NULL
);

CREATE TABLE REVIEW_LIKE (
	LIKE_NO	NUMBER		NOT NULL,
	LIKE_RNO	NUMBER		NOT NULL,
	LIKE_UNO	NUMBER		NOT NULL
);

CREATE TABLE COM_COMM (
	CC_NO	NUMBER		NOT NULL,
	CC_CONTENT	VARCHAR2(4000)		NOT NULL,
	CC_REGDATE	DATE	DEFAULT SYSDATE	NOT NULL,
	CC_MODIDATE	DATE	DEFAULT SYSDATE	NOT NULL,
	CC_CNO	NUMBER		NOT NULL,
    CC_WIRTER	NUMBER		NOT NULL,
	CC_STATUS	NUMBER		NOT NULL
);

CREATE TABLE CALENDAR (
	CAL_NO	NUMBER		NOT NULL,
	CAL_TITLE	VARCHAR2(100)		NOT NULL,
	CAL_URL	VARCHAR2(500)		NULL,
	CAL_DATE	DATE		NOT NULL,
	CAL_STATUS	VARCHAR2(100)		NOT NULL,
	CAL_CODE	NUMBER		NOT NULL
);

CREATE TABLE USER_STATUS (
	STATUS_CODE	number		NOT NULL,
	STATUS_TYPE	VARCHAR2(100)		NOT NULL
);

COMMENT ON COLUMN USER_STATUS.STATUS_TYPE IS '관리자/일반/탈퇴/차단';

CREATE TABLE REPORT (
	REPORT_NO	NUMBER		NOT NULL,
	REPORT_TITLE	VARCHAR2(100)		NULL,
	REPORT_CONT	VARCHAR2(4000)		NULL,
	REPORT_CONNO	NUMBER		NULL,
	REPORT_TYPE	VARCHAR2(100)		NULL,
	REPORT_DATE	DATE		NULL,
	REPORT_WRI	number		NOT NULL,
	REPORT_USER	number		NOT NULL
);

COMMENT ON COLUMN REPORT.REPORT_TYPE IS '글/댓글/리뷰';

CREATE TABLE CON_STATUS (
	STATUS_CODE	NUMBER		NOT NULL,
	STATUS_TYPE	VARCHAR2(100)		NOT NULL
);

COMMENT ON COLUMN CON_STATUS.STATUS_TYPE IS '블라인드/삭제/비밀글/통상';

CREATE TABLE B_CODE (
	BCODE	NUMBER		NOT NULL,
	BTYPE	VARCHAR2(100)		NOT NULL
);

CREATE TABLE CAL_TYPE (
	CAL_CODE	NUMBER		NOT NULL,
	CAL_TYPE	VARCHAR2(100)		NOT NULL
);

CREATE TABLE MOBILE_LIKE (
	LIKE_NO	number		NOT NULL,
	LIKE_UNO	number		NOT NULL,
	LIKE_MNO	NUMBER		NOT NULL
);

CREATE TABLE MOBILE_DETAIL (
	MO_NO	NUMBER		NOT NULL,
	MO_RELEASE	VARCHAR2(100)		NULL,
	MO_OSVER	VARCHAR2(100)		NULL,
	MO_MATERIAL	VARCHAR2(100)		NULL,
	MO_SIZE	VARCHAR2(100)		NULL,
	MO_WEIGHT	VARCHAR2(100)		NULL,
	MO_LINK	VARCHAR2(100)		NULL,
	MO_INCH	VARCHAR2(100)		NULL,
	MO_RESOL	VARCHAR2(100)		NULL,
	MO_PIXEL	VARCHAR2(100)		NULL,
	MO_DISTYPE	VARCHAR2(100)		NULL,
	MO_DISWIDTH	VARCHAR2(100)		NULL,
	MO_DISHEIGHT	VARCHAR2(100)		NULL,
	MO_AP	VARCHAR2(100)		NULL,
	MO_CPU	VARCHAR2(100)		NULL,
	MO_CPUCORE	VARCHAR2(100)		NULL,
	MO_CPUCLOCK	VARCHAR2(100)		NULL,
	MO_GPU	VARCHAR2(100)		NULL,
	MO_RAM	VARCHAR2(100)		NULL,
	MO_INMEMO	VARCHAR2(100)		NULL,
	MO_OUTMEMO	VARCHAR2(100)		NULL,
	MO_SENSOR	VARCHAR2(100)		NULL,
	MO_IRIS	VARCHAR2(100)		NULL,
	MO_FLASH	VARCHAR2(100)		NULL,
	MO_PICRESOL	VARCHAR2(100)		NULL,
	MO_VIDRESOL	VARCHAR2(100)		NULL,
	MO_VIDFRAME	VARCHAR2(100)		NULL,
	MO_FRESOL	VARCHAR2(100)		NULL,
	MO_FVIDRESOL	VARCHAR2(100)		NULL,
	MO_FVIDREAME	VARCHAR2(100)		NULL,
	MO_CAMERA	VARCHAR2(100)		NULL,
	MO_MAH	VARCHAR2(100)		NULL,
	MO_BATTYPE	VARCHAR2(100)		NULL,
	MO_BATFEATURE	VARCHAR2(100)		NULL,
	MO_WIRELESS	VARCHAR2(100)		NULL,
	MO_STANDBY	VARCHAR2(100)		NULL,
	MO_PROTOCOL	VARCHAR2(100)		NULL,
	MO_WIFI	VARCHAR2(100)		NULL,
	MO_BLUETOOTH	VARCHAR2(100)		NULL,
	MO_USB	VARCHAR2(100)		NULL,
	MO_BIO	VARCHAR2(100)		NULL,
	MO_PAYMENT	VARCHAR2(100)		NULL,
	MO_VERIFY	VARCHAR2(100)		NULL,
	MO_ETC	VARCHAR2(100)		NULL,
	MO_STATUS	VARCHAR2(100)		NULL,
	MO_BRANDCODE	NUMBER		NOT NULL,
	MO_OSCODE	NUMBER		NOT NULL,
	MO_BATCODE	NUMBER		NOT NULL
);

ALTER TABLE MOBILE ADD CONSTRAINT PK_MOBILE PRIMARY KEY (
	MO_NO
);

ALTER TABLE BRAND ADD CONSTRAINT PK_BRAND PRIMARY KEY (
	BRAND_CODE
);

ALTER TABLE OS ADD CONSTRAINT PK_OS PRIMARY KEY (
	OS_CODE
);

ALTER TABLE BATTERY ADD CONSTRAINT PK_BATTERY PRIMARY KEY (
	BAT_CODE
);

ALTER TABLE USER ADD CONSTRAINT PK_USER PRIMARY KEY (
	USER_NO
);

ALTER TABLE BOARD ADD CONSTRAINT PK_BOARD PRIMARY KEY (
	BNO
);

ALTER TABLE COMMENT ADD CONSTRAINT PK_COMMENT PRIMARY KEY (
	CNO
);

ALTER TABLE SUBCOMMENT ADD CONSTRAINT PK_SUBCOMMENT PRIMARY KEY (
	SNO
);

ALTER TABLE REVIEW ADD CONSTRAINT PK_REVIEW PRIMARY KEY (
	RE_NO
);

ALTER TABLE COMPARE ADD CONSTRAINT PK_COMPARE PRIMARY KEY (
	COM_NO
);

ALTER TABLE REVIEW_LIKE ADD CONSTRAINT PK_REVIEW_LIKE PRIMARY KEY (
	LIKE_NO,
	LIKE_RNO,
	LIKE_UNO
);

ALTER TABLE COM_COMM ADD CONSTRAINT PK_COM_COMM PRIMARY KEY (
	CC_NO
);

ALTER TABLE CALENDAR ADD CONSTRAINT PK_CALENDAR PRIMARY KEY (
	CAL_NO
);

ALTER TABLE USER_STATUS ADD CONSTRAINT PK_USER_STATUS PRIMARY KEY (
	STATUS_CODE
);

ALTER TABLE REPORT ADD CONSTRAINT PK_REPORT PRIMARY KEY (
	REPORT_NO
);

ALTER TABLE CON_STATUS ADD CONSTRAINT PK_CON_STATUS PRIMARY KEY (
	STATUS_CODE
);

ALTER TABLE B_CODE ADD CONSTRAINT PK_B_CODE PRIMARY KEY (
	BCODE
);

ALTER TABLE CAL_TYPE ADD CONSTRAINT PK_CAL_TYPE PRIMARY KEY (
	CAL_CODE
);

ALTER TABLE MOBILE_LIKE ADD CONSTRAINT PK_MOBILE_LIKE PRIMARY KEY (
	LIKE_NO,
	LIKE_UNO,
	LIKE_MNO
);

ALTER TABLE MOBILE_DETAIL ADD CONSTRAINT PK_MOBILE_DETAIL PRIMARY KEY (
	MO_NO
);

ALTER TABLE MOBILE ADD CONSTRAINT FK_BRAND_TO_MOBILE_1 FOREIGN KEY (
	MO_BRANDCODE
)
REFERENCES BRAND (
	BRAND_CODE
);

ALTER TABLE USER ADD CONSTRAINT FK_USER_STATUS_TO_USER_1 FOREIGN KEY (
	USER_STATUS
)
REFERENCES USER_STATUS (
	STATUS_CODE
);

ALTER TABLE USER ADD CONSTRAINT FK_MOBILE_TO_USER_1 FOREIGN KEY (
	USER_MNO
)
REFERENCES MOBILE (
	MO_NO
);

ALTER TABLE BOARD ADD CONSTRAINT FK_B_CODE_TO_BOARD_1 FOREIGN KEY (
	BCODE
)
REFERENCES B_CODE (
	BCODE
);

ALTER TABLE BOARD ADD CONSTRAINT FK_USER_TO_BOARD_1 FOREIGN KEY (
	BWRITER
)
REFERENCES USER (
	USER_NO
);

ALTER TABLE BOARD ADD CONSTRAINT FK_CON_STATUS_TO_BOARD_1 FOREIGN KEY (
	BSTATUS
)
REFERENCES CON_STATUS (
	STATUS_CODE
);

ALTER TABLE COMMENT ADD CONSTRAINT FK_USER_TO_COMMENT_1 FOREIGN KEY (
	CWRITER
)
REFERENCES USER (
	USER_NO
);

ALTER TABLE COMMENT ADD CONSTRAINT FK_CON_STATUS_TO_COMMENT_1 FOREIGN KEY (
	CSTATUS
)
REFERENCES CON_STATUS (
	STATUS_CODE
);

ALTER TABLE COMMENT ADD CONSTRAINT FK_BOARD_TO_COMMENT_1 FOREIGN KEY (
	BNO
)
REFERENCES BOARD (
	BNO
);

ALTER TABLE SUBCOMMENT ADD CONSTRAINT FK_USER_TO_SUBCOMMENT_1 FOREIGN KEY (
	SWRITER
)
REFERENCES USER (
	USER_NO
);

ALTER TABLE SUBCOMMENT ADD CONSTRAINT FK_CON_STATUS_TO_SUBCOMMENT_1 FOREIGN KEY (
	SSTATUS
)
REFERENCES CON_STATUS (
	STATUS_CODE
);

ALTER TABLE SUBCOMMENT ADD CONSTRAINT FK_COMMENT_TO_SUBCOMMENT_1 FOREIGN KEY (
	CNO
)
REFERENCES COMMENT (
	CNO
);

ALTER TABLE REVIEW ADD CONSTRAINT FK_USER_TO_REVIEW_1 FOREIGN KEY (
	RE_WRITER
)
REFERENCES USER (
	USER_NO
);

ALTER TABLE REVIEW ADD CONSTRAINT FK_MOBILE_TO_REVIEW_1 FOREIGN KEY (
	RE_MNO
)
REFERENCES MOBILE (
	MO_NO
);

ALTER TABLE REVIEW ADD CONSTRAINT FK_CON_STATUS_TO_REVIEW_1 FOREIGN KEY (
	RE_STATUS
)
REFERENCES CON_STATUS (
	STATUS_CODE
);

ALTER TABLE COMPARE ADD CONSTRAINT FK_MOBILE_TO_COMPARE_1 FOREIGN KEY (
	COM_MNO1
)
REFERENCES MOBILE (
	MO_NO
);

ALTER TABLE COMPARE ADD CONSTRAINT FK_MOBILE_TO_COMPARE_2 FOREIGN KEY (
	COM_MNO2
)
REFERENCES MOBILE (
	MO_NO
);

ALTER TABLE REVIEW_LIKE ADD CONSTRAINT FK_REVIEW_TO_REVIEW_LIKE_1 FOREIGN KEY (
	LIKE_RNO
)
REFERENCES REVIEW (
	RE_NO
);

ALTER TABLE REVIEW_LIKE ADD CONSTRAINT FK_USER_TO_REVIEW_LIKE_1 FOREIGN KEY (
	LIKE_UNO
)
REFERENCES USER (
	USER_NO
);

ALTER TABLE COM_COMM ADD CONSTRAINT FK_CON_STATUS_TO_COM_COMM_1 FOREIGN KEY (
	CC_STATUS
)
REFERENCES CON_STATUS (
	STATUS_CODE
);

ALTER TABLE COM_COMM ADD CONSTRAINT FK_USER_TO_1 FOREIGN KEY (
	CC_WIRTER
)
REFERENCES USER_TABLE (
	USER_NO
);

ALTER TABLE COM_COMM ADD CONSTRAINT FK_COMPARE_TO_COM_COMM_1 FOREIGN KEY (
	CC_CNO
)
REFERENCES COMPARE (
	COM_NO
);

ALTER TABLE CALENDAR ADD CONSTRAINT FK_CAL_TYPE_TO_CALENDAR_1 FOREIGN KEY (
	CAL_CODE
)
REFERENCES CAL_TYPE (
	CAL_CODE
);

ALTER TABLE REPORT ADD CONSTRAINT FK_USER_TO_REPORT_1 FOREIGN KEY (
	REPORT_WRI
)
REFERENCES USER (
	USER_NO
);

ALTER TABLE REPORT ADD CONSTRAINT FK_USER_TO_REPORT_2 FOREIGN KEY (
	REPORT_USER
)
REFERENCES USER (
	USER_NO
);

ALTER TABLE MOBILE_LIKE ADD CONSTRAINT FK_USER_TO_MOBILE_LIKE_1 FOREIGN KEY (
	LIKE_UNO
)
REFERENCES USER (
	USER_NO
);

ALTER TABLE MOBILE_LIKE ADD CONSTRAINT FK_MOBILE_TO_MOBILE_LIKE_1 FOREIGN KEY (
	LIKE_MNO
)
REFERENCES MOBILE (
	MO_NO
);

ALTER TABLE MOBILE_DETAIL ADD CONSTRAINT FK_MOBILE_TO_MOBILE_DETAIL_1 FOREIGN KEY (
	MO_NO
)
REFERENCES MOBILE (
	MO_NO
);

ALTER TABLE MOBILE_DETAIL ADD CONSTRAINT FK_BRAND_TO_MOBILE_DETAIL_1 FOREIGN KEY (
	MO_BRANDCODE
)
REFERENCES BRAND (
	BRAND_CODE
);

ALTER TABLE MOBILE_DETAIL ADD CONSTRAINT FK_OS_TO_MOBILE_DETAIL_1 FOREIGN KEY (
	MO_OSCODE
)
REFERENCES OS (
	OS_CODE
);

ALTER TABLE MOBILE_DETAIL ADD CONSTRAINT FK_BATTERY_TO_MOBILE_DETAIL_1 FOREIGN KEY (
	MO_BATCODE
)
REFERENCES BATTERY (
	BAT_CODE
);

DELETE BRAND;

DROP SEQUENCE BRAND_SEQ;
CREATE SEQUENCE BRAND_SEQ NOCACHE;

INSERT INTO BRAND VALUES(BRAND_SEQ.NEXTVAL, '삼성전자');
INSERT INTO BRAND VALUES(BRAND_SEQ.NEXTVAL, 'LG전자');
INSERT INTO BRAND VALUES(BRAND_SEQ.NEXTVAL, '애플');
INSERT INTO BRAND VALUES(BRAND_SEQ.NEXTVAL, '팬택');
INSERT INTO BRAND VALUES(BRAND_SEQ.NEXTVAL, 'HTC');
INSERT INTO BRAND VALUES(BRAND_SEQ.NEXTVAL, '모토로라');
INSERT INTO BRAND VALUES(BRAND_SEQ.NEXTVAL, 'KT Tech');
INSERT INTO BRAND VALUES(BRAND_SEQ.NEXTVAL, 'SK 텔레시스');
INSERT INTO BRAND VALUES(BRAND_SEQ.NEXTVAL, '소니 모바일');
INSERT INTO BRAND VALUES(BRAND_SEQ.NEXTVAL, '노키아');

CREATE SEQUENCE OS_SEQ NOCACHE;

INSERT INTO OS VALUES(OS_SEQ.NEXTVAL, '안드로이드');
INSERT INTO OS VALUES(OS_SEQ.NEXTVAL, 'iOS');

DROP TABLE BATTERY CASCADE CONSTRAINTS; 
ALTER TABLE MOBILE_DETAIL DROP COLUMN MO_BATCODE;

ALTER TABLE MOBILE ADD (MO_NAME_EN VARCHAR2(100));
ALTER TABLE MOBILE_DETAIL DROP COLUMN MO_BRANDCODE;

CREATE OR REPLACE VIEW MOBILE_VIEW AS
    SELECT A.MO_NO NO, A.MO_CODE 모델번호, A.MO_NAME 제품명, A.MO_NAME_EN 제품명(영어), C.BRAND_NAME BRAND, B.MO_RELEASE 발매일,
        D.OS_NAME OS이름, B.MO_OSVER OS버젼, B.MO_MATERIAL 주요재질, B.MO_SIZE 크기, B.MO_WEIGHT 무게,
        B.MO_LINK 연결단자, B.MO_INCH 액정크기, B.MO_RESOL 화면해상도, B.MO_PIXEL 픽셀인치, B.MO_DISTYPE 화면타입,
        B.MO_DISWIDTH 화면폭, B.MO_DISHEIGHT 화면높이, B.MO_AP AP, B.MO_CPU CPU, B.MO_CPUCORE CPU코어,
        B.MO_CPUCLOCK CPU클럭, B.MO_GPU GPU, B.MO_RAM RAM, B.MO_INMEMO 내장메모리, B.MO_OUTMEMO 외장메모리,
        B.MO_SENSOR 카메라센서, B.MO_IRIS 카메라조리개, B.MO_FLASH 카메라플래쉬, B.MO_PICRESOL 사진해상도,
        B.MO_VIDRESOL 영상녹화해상도, B.MO_VIDFRAME 영상녹화프레임, B.MO_FRESOL 전면사진해상도,
        B.MO_FVIDRESOL 전면녹화해상도, B.MO_FVIDREAME 전면녹화프레임,
        B.MO_CAMERA 카메라, B.MO_MAH 배터리, B.MO_BATTYPE 배터리타입, 
        B.MO_FASTCHAR 고속충전, B.MO_REMOVEBAT 탈착여부, B.MO_WIRELESS 무선충전, B.MO_STANDBY 대기시간,
        B.MO_PROTOCOL 통신규격, B.MO_WIFI WIFI, B.MO_BLUETOOTH 블루투스, B.MO_USB USB버젼, B.MO_BIO 생체인식,
        B.MO_PAYMENT 모바일결제, B.MO_VERIFY 인증, B.MO_ETC ETC, B.MO_STATUS STATUS,
        E.MI_FRONTNAME 전면이미지, E.MI_BACKNAME 후면이미지, E.MI_PATH 저장경로
FROM MOBILE A
JOIN BRAND C ON (MO_BRANDCODE = BRAND_CODE)
JOIN MOBILE_DETAIL B ON ( A.MO_NO = B.MO_NO )
JOIN OS D ON ( MO_OSCODE = D.OS_CODE )
LEFT JOIN MOBILE_IMAGE E ON (A.MO_NO = E.REF_MO_NO);

SELECT A.MO_NO NO, A.MO_CODE 모델번호, A.MO_NAME 제품명, A.MO_NAME_EN 제품명(영어), C.BRAND_NAME 제조사, B.MO_RELEASE 발매일,
        D.OS_NAME OS이름, B.MO_OSVER OS버젼, B.MO_MATERIAL 주요재질, B.MO_SIZE 크기, B.MO_WEIGHT 무게,
        B.MO_LINK 연결단자, B.MO_INCH 액정크기, B.MO_RESOL 화면해상도, B.MO_PIXEL 픽셀인치, B.MO_DISTYPE 화면타입,
        B.MO_DISWIDTH 화면폭, B.MO_DISHEIGHT 화면높이, B.MO_AP AP, B.MO_CPU CPU, B.MO_CPUCORE CPU코어,
        B.MO_CPUCLOCK CPU클럭, B.MO_GPU GPU, B.MO_RAM RAM, B.MO_INMEMO 내장메모리, B.MO_OUTMEMO 외장메모리,
        B.MO_SENSOR 카메라센서, B.MO_IRIS 카메라조리개, B.MO_FLASH 카메라플래쉬, B.MO_PICRESOL 사진해상도,
        B.MO_VIDRESOL 영상녹화해상도, B.MO_VIDFRAME 영상녹화프레임, B.MO_FRESOL 전면사진해상도,
        B.MO_FVIDRESOL 전면녹화해상도, B.MO_FVIDREAME 전면녹화프레임,
        B.MO_CAMERA 카메라, B.MO_MAH 배터리, B.MO_BATTYPE 배터리타입, 
        B.MO_FASTCHAR 고속충전, B.MO_REMOVEBAT 탈착여부, B.MO_WIRELESS 무선충전, B.MO_STANDBY 대기시간,
        B.MO_PROTOCOL 통신규격, B.MO_WIFI WIFI, B.MO_BLUETOOTH 블루투스, B.MO_USB USB버젼, B.MO_BIO 생체인식,
        B.MO_PAYMENT 모바일결제, B.MO_VERIFY 인증, B.MO_ETC ETC, B.MO_STATUS STATUS,
        E.MI_FRONTNAME 전면이미지, E.MI_BACKNAME 후면이미지, E.MI_PATH 저장경로
FROM MOBILE A
JOIN BRAND C ON (MO_BRANDCODE = BRAND_CODE)
JOIN MOBILE_DETAIL B ON ( A.MO_NO = B.MO_NO )
JOIN OS D ON ( MO_OSCODE = D.OS_CODE )
LEFT JOIN MOBILE_IMAGE E ON (A.MO_NO = E.REF_MO_NO);

SELECT * FROM MOBILE_VIEW;



CREATE OR REPLACE VIEW MOBILE_INSERT AS
SELECT A.MO_NO NO, A.MO_CODE 모델번호, A.MO_NAME 제품명, A.MO_NAME_EN 제품명(영어), A.MO_BRANDCODE 제조사코드, B.MO_RELEASE 발매일,
        B.MO_OSCODE OS코드, B.MO_OSVER OS버젼, B.MO_MATERIAL 주요재질, B.MO_SIZE 크기, B.MO_WEIGHT 무게,
        B.MO_LINK 연결단자, B.MO_INCH 액정크기, B.MO_RESOL 화면해상도, B.MO_PIXEL 픽셀인치, B.MO_DISTYPE 화면타입,
        B.MO_DISWIDTH 화면폭, B.MO_DISHEIGHT 화면높이, B.MO_AP AP, B.MO_CPU CPU, B.MO_CPUCORE CPU코어,
        B.MO_CPUCLOCK CPU클럭, B.MO_GPU GPU, B.MO_RAM RAM, B.MO_INMEMO 내장메모리, B.MO_OUTMEMO 외장메모리,
        B.MO_SENSOR 카메라센서, B.MO_IRIS 카메라조리개, B.MO_FLASH 카메라플래쉬, B.MO_PICRESOL 사진해상도,
        B.MO_VIDRESOL 영상녹화해상도, B.MO_VIDFRAME 영상녹화프레임, B.MO_FRESOL 전면사진해상도,
        B.MO_FVIDRESOL 전면녹화해상도, B.MO_FVIDREAME 전면녹화프레임,
        B.MO_CAMERA 카메라, B.MO_MAH 배터리, B.MO_BATTYPE 배터리타입, 
        B.MO_FASTCHAR 고속충전, B.MO_REMOVEBAT 탈착여부, B.MO_WIRELESS 무선충전, B.MO_STANDBY 대기시간,
        B.MO_PROTOCOL 통신규격, B.MO_WIFI WIFI, B.MO_BLUETOOTH 블루투스, B.MO_USB USB버젼, B.MO_BIO 생체인식,
        B.MO_PAYMENT 모바일결제, B.MO_VERIFY 인증, B.MO_ETC ETC, B.MO_STATUS 상태코드

FROM MOBILE A
JOIN BRAND C ON (MO_BRANDCODE = BRAND_CODE)
JOIN MOBILE_DETAIL B ON ( A.MO_NO = B.MO_NO );

DROP VIEW MOBILE_INSERT;

DELETE MOBILE_DETAIL;

INSERT INTO MOBILE VALUES (0, 'TEST', 'TEST', 1, 'TEST');
INSERT INTO MOBILE_DETAIL VALUES (0, SYSDATE, 'TEST', 'TEST', 'TEST', 'TEST', 'TEST', 0, 'TEST', 'TEST', 'TEST', 'TEST', 'TEST',
'TEST', 'TEST', 'TEST', 'TEST', 'TEST', 'TEST', 'TEST', 'TEST', 'TEST', 'TEST', 'TEST', 'TEST', 'TEST', 'TEST', 'TEST', 'TEST',
'TEST', 'TEST', 0, 'TEST', 'TEST', 'TEST', 'TEST', 'TEST', 'TEST', 'TEST', 'TEST', 'TEST', 'TEST', 'TEST', 'TEST', 1,
'TEST', 'TEST');

ALTER TABLE MOBILE_DETAIL MODIFY(MO_INCH NUMBER);
ALTER TABLE MOBILE_DETAIL DROP COLUMN MO_BATFEATURE;
ALTER TABLE MOBILE_DETAIL ADD(MO_FASTCHAR VARCHAR2(100));
ALTER TABLE MOBILE_DETAIL ADD(MO_REMOVEBAT VARCHAR2(100));
ALTER TABLE MOBILE_DETAIL MODIFY(MO_RELEASE DATE);
ALTER TABLE MOBILE_DETAIL MODIFY(MO_MAH NUMBER);

CREATE SEQUENCE MOB_SEQ NOCACHE;
DELETE MOBILE_DETAIL WHERE MO_NO=6;
DELETE MOBILE CASCADE WHERE MO_NO=6 ;

SELECT 'DROP TABLE ' || TABLE_NAME || ' CASCADE CONSTRAINTS;' FROM user_tables;

DROP TABLE MOBILE CASCADE CONSTRAINTS;
DROP TABLE BRAND CASCADE CONSTRAINTS;
DROP TABLE OS CASCADE CONSTRAINTS;
DROP TABLE USER CASCADE CONSTRAINTS;
DROP TABLE BOARD CASCADE CONSTRAINTS;
DROP TABLE COMMENT CASCADE CONSTRAINTS;
DROP TABLE SUBCOMMENT CASCADE CONSTRAINTS;
DROP TABLE REVIEW CASCADE CONSTRAINTS;
DROP TABLE COMPARE CASCADE CONSTRAINTS;
DROP TABLE REVIEW_LIKE CASCADE CONSTRAINTS;
DROP TABLE COM_COMM CASCADE CONSTRAINTS;
DROP TABLE CALENDAR CASCADE CONSTRAINTS;
DROP TABLE USER_STATUS CASCADE CONSTRAINTS;
DROP TABLE REPORT CASCADE CONSTRAINTS;
DROP TABLE CON_STATUS CASCADE CONSTRAINTS;
DROP TABLE B_CODE CASCADE CONSTRAINTS;
DROP TABLE CAL_TYPE CASCADE CONSTRAINTS;
DROP TABLE MOBILE_LIKE CASCADE CONSTRAINTS;
DROP TABLE MOBILE_DETAIL CASCADE CONSTRAINTS;

SELECT * FROM (SELECT ROWNUM RNUM, M.* FROM (SELECT * FROM MOBILE_VIEW WHERE STATUS = 'Y' and brand in ('애플') ORDER BY 1 DESC) M ) WHERE RNUM BETWEEN 1 AND 10;

BEGIN
    FOR I IN 1..500
    LOOP
        INSERT INTO MOBILE VALUES (MOB_SEQ.NEXTVAL, I||'CODE', I||'테스트이름',  ROUND(DBMS_RANDOM.VALUE(1,10)), I||'TESTNAME');
        INSERT INTO MOBILE_DETAIL VALUES (MOB_SEQ.CURRVAL, SYSDATE, 'VER', 'TEST', 'TEST', 'TEST', 'TEST',  ROUND(DBMS_RANDOM.VALUE(4,9)), 'TEST', 'TEST', 'TEST', 'TEST', 'TEST',
'TEST', 'TEST', 'TEST', 'TEST', 'TEST', 'TEST', 'TEST', 'TEST', 'TEST', 'TEST', 'TEST', 'TEST', 'TEST', 'TEST', 'TEST', 'TEST',
'TEST', 'TEST',  ROUND(DBMS_RANDOM.VALUE(500,5000)), 'TEST', 'TEST', 'TEST', 'TEST', 'TEST', 'TEST', 'TEST', 'TEST', 'TEST', 'TEST', 'TEST', 'TEST', ROUND(DBMS_RANDOM.VALUE(1,2)),
'TEST', 'TEST');
    END LOOP;
END;
/

SELECT ROUND(DBMS_RANDOM.VALUE(1,2)) FROM DUAL;
UPDATE mobile_detail SET MO_STATUS = 'Y' WHERE MO_NO > 50;

COMMIT;
SELECT * FROM (SELECT ROWNUM RNUM, M.* FROM (SELECT * FROM MOBILE_VIEW WHERE STATUS = 'Y' AND brand IN ( '삼성전자','LG전자'  ) ORDER BY 1 DESC) M ) WHERE RNUM BETWEEN 1 AND 10;

CREATE TABLE MO_COMM (
	MCO_NO	NUMBER		NOT NULL,
	MCO_CONTENT	VARCHAR2(4000)		NULL,
	MCO_REGDATE	TIMESTAMP	DEFAULT SYSTIMESTAMP	NULL,
	MCO_MODIDATE	TIMESTAMP	DEFAULT SYSTIMESTAMP	NULL,
	MO_NO	NUMBER		NOT NULL,
	MCO_USERNO	NUMBER		NOT NULL,
	MCO_STATUS	NUMBER		NOT NULL
);

ALTER TABLE MO_COMM ADD CONSTRAINT PK_MO_COMM PRIMARY KEY (
	MCO_NO
);

ALTER TABLE MO_COMM ADD CONSTRAINT FK_MOBILE_TO_MO_COMM_1 FOREIGN KEY (
	MO_NO
)
REFERENCES MOBILE (
	MO_NO
);
ALTER TABLE MO_COMM ADD CONSTRAINT FK_USER_TABLE_TO_MO_COMM_1 FOREIGN KEY (
	MCO_USERNO
)
REFERENCES USER_TABLE (
	USER_NO
);

ALTER TABLE MO_COMM ADD CONSTRAINT FK_CON_STATUS_TO_MO_COMM_1 FOREIGN KEY (
	MCO_STATUS
)
REFERENCES CON_STATUS (
	STATUS_CODE
);

INSERT INTO MO_COMM VALUES( 0, '댓글테스트', DEFAULT, DEFAULT, 0, 0, 1);


INSERT INTO CON_STATUS VALUES( 1, '일반');
INSERT INTO CON_STATUS VALUES( 2, '삭제');
INSERT INTO CON_STATUS VALUES( 3, '신고제재');

INSERT INTO USER_STATUS VALUES( 0, 'TEST');

SELECT * FROM MO_COMM WHERE MCO_STATUS = 1;

INSERT INTO USER_TABLE VALUES(0, 'admin', '1234', 'admin', null, sysdate, sysdate, 'Y', default, null, null, 0);

CREATE SEQUENCE SEQ_MOCTEST NOCACHE;

BEGIN
    FOR I IN 1..100
    LOOP
        INSERT INTO MO_COMM VALUES (SEQ_MOCTEST.NEXTVAL, I||'번째 댓글', DEFAULT, DEFAULT, ROUND(DBMS_RANDOM.VALUE(1,25))*2, 0, 1);
       
    END LOOP;
END;
/
COMMIT;

SELECT ROUND(DBMS_RANDOM.VALUE(3,50)) FROM DUAL;

--- 모바일 댓글 + 유저 테이블
SELECT MCO_NO, MCO_CONTENT, MCO_REGDATE, MO_NO, MCO_USERNO, USER_NAME, MCO_STATUS FROM MO_COMM 
JOIN USER_TABLE ON ( MCO_USERNO = USER_NO ) WHERE MO_NO = 40;

--- 모바일 댓글 + 유저테이블 뷰 생성
CREATE OR REPLACE VIEW MOBILE_COMMENT_VIEW AS
SELECT MCO_NO, MCO_CONTENT, MCO_REGDATE, MO_NO, MCO_USERNO, USER_NAME, MCO_STATUS FROM MO_COMM 
JOIN USER_TABLE ON ( MCO_USERNO = USER_NO );

---- 모바일 댓글 뷰 테스트
SELECT m.*, (SELECT COUNT(*) FROM REPORT_TABLE WHERE REPORT_WRI = 0 AND REPORT_CONNO = MCO_NO ) I_REPORT FROM MOBILE_COMMENT_VIEW m WHERE MO_NO = 42;

UPDATE MO_COMM SET MCO_STATUS = 2, MCO_MODIDATE = SYSTIMESTAMP WHERE MCO_NO = 0;
SELECT * FROM MOBILE_COMMENT_VIEW WHERE MCO_STATUS = 1 AND MCO_NO = 123;
UPDATE MO_COMM SET MCO_CONTENT = 'AAA', MCO_MODIDATE = SYSTIMESTAMP WHERE MCO_STATUS = 1 AND MCO_NO = 123;
DELETE FROM USER_TABLE WHERE USER_NO = 6;
COMMIT;

INSERT INTO REVIEW VALUES (0, 'TEST REVIEW', 'TEST REVEIW', 4, SYSDATE, SYSDATE, 0, 0, 0, 1 );
CREATE SEQUENCE SEQ_REV NOCACHE;
BEGIN
    FOR I IN 1..100
    LOOP
        INSERT INTO REVIEW VALUES (SEQ_REV.NEXTVAL, I||'번째 리뷰',  I||'번째 리뷰 내용', ROUND(DBMS_RANDOM.VALUE(1,10))*0.5, SYSDATE, SYSDATE, 0, 0, ROUND(DBMS_RANDOM.VALUE(2,50)), 1);
       
    END LOOP;
END;
/

SELECT * FROM REVIEW WHERE RE_MNO = 50;
---------------- 모바일 리뷰 + 모바일 좋아요---리뷰별  좋아요 갯수 세기
SELECT * FROM COUNT_REVIEW_LIKE;

------------ 좋아요 갯수 뷰생성
CREATE OR REPLACE VIEW COUNT_REVIEW_LIKE AS
SELECT RE_NO, COUNT(LIKE_NO) COUNT_L FROM REVIEW R
JOIN REVIEW_LIKE ON ( RE_NO = LIKE_RNO )
GROUP BY RE_NO;



----------------- 리뷰 조회용 뷰 생성
CREATE OR REPLACE VIEW MOBILE_REVIEW AS
SELECT RE_NO, RE_TITLE, RE_CONTENT, RE_STAR, RE_REGDATE, RE_MODIDATE, COUNT_L, RE_WRITER, USER_NAME, RE_MNO, RE_STATUS
FROM REVIEW
LEFT JOIN COUNT_REVIEW_LIKE USING ( RE_NO )
JOIN USER_TABLE ON  ( RE_WRITER = USER_NO );

--------------------- 리뷰 조회용 예시구문
SELECT RE_NO, RE_TITLE, RE_CONTENT, RE_STAR, RE_REGDATE, RE_MODIDATE, (SELECT COUNT(*) FROM REVIEW_LIKE WHERE LIKE_UNO = 0 GROUP BY LIKE_RNO) IM_LIKE, COUNT_L, RE_WRITER, USER_NAME, RE_MNO, RE_STATUS FROM MOBILE_REVIEW M ;
SELECT RE_NO, RE_TITLE, RE_CONTENT, RE_STAR, RE_REGDATE, RE_MODIDATE, (SELECT COUNT(*) FROM REVIEW_LIKE WHERE LIKE_UNO = 0 and re_no=like_rno GROUP BY LIKE_RNO) IM_LIKE, COUNT_L, RE_WRITER, USER_NAME, RE_MNO, RE_STATUS, (SELECT COUNT(*) FROM REPORT_TABLE WHERE REPORT_WRI = 0 AND RE_NO = REPORT_CONNO) I_REPORT  FROM MOBILE_REVIEW M WHERE RE_MNO = 51 ORDER BY 1 DESC;



----------------- USER_TABLE 가 데이터 넣기
BEGIN
    FOR I IN 1..100
    LOOP
        INSERT INTO USER_TABLE VALUES (
            SEQ_UNO.NEXTVAL,
            'test'||I||'@test.co.kr',
           '1ARVn2Auq2/WAqx2gNrL+q3RNjAzXpUfCXrzkA6d4Xa22yhRLy4AC50E+6UTPoscbo31nbOoq51gvkuXzJ6B2w==',
            'test'||I, NULL, SYSDATE, SYSDATE, 'Y', 1, NULL, NULL, 1, NULL);
    END LOOP;
END;
/
commit;
INSERT INTO USER_TABLE  VALUES ( SEQ_UNO.NEXTVAL, 'test01@test.co.kr', '1ARVn2Auq2/WAqx2gNrL+q3RNjAzXpUfCXrzkA6d4Xa22yhRLy4AC50E+6UTPoscbo31nbOoq51gvkuXzJ6B2w==', 'test1', NULL, SYSDATE, SYSDATE, 'Y', 1, NULL, NULL, 1, NULL);

-------------------------- 리뷰 좋아요 테이블 insert문 예제


----------------------------------- 리뷰 테이블 insert 문 예제
INSERT INTO REVIEW VALUES (SEQ_REV.NEXTVAL, ?, ?, ?, SYSDATE, SYSDATE, 0, ?, ?, 1);

-------------------------------- 리뷰 테이블 삭제 update문 예제
UPDATE REVIEW SET RE_STATUS = '2' WHERE ;

------------------------------------ 리뷰 select 문 예제
SELECT * FROM REVIEW WHERE RE_STATUS = 1 AND RE_NO = 3;

--- ------------- 리뷰UPDATE문 예제
UPDATE REVIEW SET RE_TITLE = 'AAA', RE_CONTENT = 'AAA', RE_STAR = 6 WHERE RE_NO = 3 AND RE_STATUS = 1;

-------------------COMPARE 용 SEQUENCE 생성
CREATE SEQUENCE SEQ_MCP NOCACHE;

SELECT COUNT(*) FROM COMPARE WHERE COM_MNO1 = 0 AND COM_MNO2 = 1;

------------------------ 예설씨 뷰
CREATE OR REPLACE VIEW MYBOARD
AS
SELECT ROWNUM RNUM, BNO, BTITLE, BCONTENT, BCOUNT, TO_CHAR(BREGDATE,'yyyy-mm-dd hh:mi:ss') BREGDATE,TO_CHAR(BMODIDATE,'yyyy-mm-dd hh:mi:ss') BMODIDATE, BCODE, BWRITER, BSTATUS, BCATEGORY FROM BOARD WHERE BSTATUS = 1 ORDER BY 1 DESC;

SELECT * FROM MYBOARD WHERE BWRITER = 1;

SELECT M.*,(SELECT COUNT(*) FROM COMMENTT C WHERE C.BNO = M.BNO) COMM_COUNT FROM MYBOARD M;

CREATE OR REPLACE VIEW MYBOARDLIST
AS;
SELECT ROWNUM RRNUM, M.*,(SELECT COUNT(*) FROM COMMENTT C WHERE C.BNO = M.BNO) COMM_COUNT FROM MYBOARD M WHERE BWRITER = 1;

SELECT * FROM MYBOARDLIST WHERE BWRITER = 1 ;

SELECT * FROM (SELECT ROWNUM RRNUM, M.*,(SELECT COUNT(*) FROM COMMENTT C WHERE C.BNO = M.BNO) COMM_COUNT FROM MYBOARD M WHERE BWRITER = ?) WHERE RRNUM BETWEEN ? AND ?;


------------------------------ COMPARE 테이블 INSERT 구문 예시
INSERT INTO COMPARE VALUES(SEQ_MCP.NEXTVAL, 0, 4, 5);
---------------------------- COMPARE 테이블 UPDATE 구문 예시
UPDATE COMPARE SET COM_COUNT = COM_COUNT +1 WHERE COM_MNO1 = ? AND COM_MNO2 = ?;

--------------------------- 탈퇴 테스트한 유저들 되살리기
UPDATE USER_TABLE SET USER_STATUS = 1 WHERE USER_NO > 0;
COMMIT;

--------------------------- 비교 댓글 뷰 만들기
CREATE OR REPLACE VIEW COMPARE_COMMENT_VIEW
AS
SELECT CC_NO, CC_CONTENT, CC_REGDATE, CC_MODIDATE, CC_STATUS, CC_WIRTER, USER_NAME, CC_CNO
FROM COM_COMM
LEFT JOIN USER_TABLE ON ( CC_WIRTER = USER_NO );

--------------------------- 비교 댓글용 시퀀스 생성
CREATE SEQUENCE SEQ_MCC NOCACHE;
INSERT INTO COM_COMM VALUES (SEQ_MCC.NEXTVAL, ? ,DEFAULT, DEFAULT, ?, ?, 1);

delete compare where com_no in (4, 6,7,8, 9);

drop table com_comm;

---------------------------- 모바일 이미지용 테이블 수정
DROP TABLE MOBILE_IMAGE;
CREATE TABLE MOBILE_IMAGE (
	REF_MO_NO	NUMBER		NOT NULL,
	MI_FRONTNAME	VARCHAR2(4000)		NULL,
	MI_BACKNAME	VARCHAR2(4000)		NULL,
	MI_PATH	VARCHAR2(4000)		NULL,
	MI_UPDATE	DATE	DEFAULT SYSDATE	NULL
);

ALTER TABLE MOBILE_IMAGE ADD CONSTRAINT PK_MOBILE_IMAGE PRIMARY KEY (
	REF_MO_NO
);

ALTER TABLE MOBILE_IMAGE ADD CONSTRAINT FK_M_DETAIL_TO_M_IMAGE_1 FOREIGN KEY (
	REF_MO_NO
)
REFERENCES MOBILE_DETAIL (
	MO_NO
);

SELECT * FROM MOBILE_VIEW WHERE NO = 10 AND STATUS = 'Y';

drop table report;

CREATE TABLE REPORT (
	REPORT_NO	NUMBER		NOT NULL,
	REPORT_TITLE	VARCHAR2(100)		NULL,
	REPORT_CONT	VARCHAR2(4000)		NULL,
	REPORT_CONNO	NUMBER		NULL,
	REPORT_DATE	DATE		NULL,
	REPORT_RESULT	CLOB		NULL,
	REPORT_WRI	number		NOT NULL,
	REPORT_USER	number		NOT NULL,
	REPORT_REF_NO	NUMBER		NOT NULL
);

CREATE TABLE REPORT_TYPE (
	R_REF_NO	NUMBER		NOT NULL,
	R_REF_NAME	VARCHAR2(100)		NULL
);

ALTER TABLE REPORT ADD CONSTRAINT PK_REPORT PRIMARY KEY (
	REPORT_NO
);

ALTER TABLE REPORT ADD CONSTRAINT FK_USER_TABLE_TO_REPORT_1 FOREIGN KEY (
	REPORT_WRI
)
REFERENCES USER_TABLE (
	USER_NO
);

ALTER TABLE REPORT ADD CONSTRAINT FK_USER_TABLE_TO_REPORT_2 FOREIGN KEY (
	REPORT_USER
)
REFERENCES USER_TABLE (
	USER_NO
);

ALTER TABLE REPORT_TYPE ADD CONSTRAINT PK_REPORT_TYPE PRIMARY KEY (
	R_REF_NO
);


ALTER TABLE REPORT ADD CONSTRAINT FK_REPORT_TYPE_TO_REPORT_1 FOREIGN KEY (
	REPORT_REF_NO
)
REFERENCES REPORT_TYPE (
	R_REF_NO
);

alter table REPORT DROP column REPORT_TITLE;
alter table report rename to REPORT_TABLE;
commit;

-------------------------- 신고게시판 insert 예제
CREATE SEQUENCE SEQ_REP NOCACHE;
INSERT INTO REPORT VALUES (SEQ_REP.NEXTVAL, ?, ?, SYSDATE, NULL, ?, ?, ?);

SELECT M.*, (SELECT COUNT(*) FROM REPORT_TABLE WHERE REPORT_WRI = 0 AND REPORT_CONNO = MCO_NO AND REPORT_REF_NO = 5) I_REPORT, (SELECT COUNT(*) FROM REPORT_TABLE WHERE REPORT_REF_NO = 5 AND REPORT_CONNO = MCO_NO) REPORTED FROM MOBILE_COMMENT_VIEW M WHERE MO_NO = 50;
SELECT C.*, (SELECT COUNT(*) FROM REPORT_TABLE WHERE REPORT_WRI = 0 AND REPORT_CONNO = CC_NO AND REPORT_REF_NO = 6) I_REPORT, (SELECT COUNT(*) FROM REPORT_TABLE WHERE REPORT_REF_NO = 6 AND REPORT_CONNO = CC_NO) REPORTED FROM COMPARE_COMMENT_VIEW C WHERE CC_CNO = 30;

--------------------------------- mobile update문 예제
UPDATE MOBILE SET MO_CODE = ?, MO_NAME = ?, MO_NAME_EN = ?, MO_BRANDCODE = ? WHERE MO_NO = ?,
UPDATE MOBILE_DETAIL SET MO_REREASE = ?, MO_OSVER = ?, MO_MATERIAL = ?, MO_SIZE = ?, MO_WEIGHT = ?, MO_LINK = ?, MO_INCH = ?, MO_RESOL = ?, MO_PIXEL = ?, MO_DISTYPE = ?, MO_DISWIDTH = ?, MO_DISHEIGHT = ?, MO_AP = ?, MO_CPU = ?, MO_CPUCORE = ?, MO_CPUCLOCK = ?, MO_GPU = ?, MO_RAM = ?, MO_INMEMO = ?, MO_OUTMEMO = ?, MO_SENSOR = ?, MO_IRIS = ?, MO_FLASH = ?, MO_PICRESOL = ?, MO_VIDRESOL = ?, MO_VIDFRAME = ?, MO_FRESOL = ?, MO_FVIDRESOL = ?, MO_FVIDREAME = ?, MO_CAMERA = ?, MO_MAH = ?, MO_VATTYPE = ?, MO_FASTCHAR = ?, MO_REMOVEBAT = ?, MO_WIRELESS = ?, MO_STANDBY = ?, MO_PROTOCOL = ?, MO_WIFI = ?, MO_BLUETOOTH = ?, MO_USB = ?, MO_BIO = ?, MO_PAYMENT = ?, MO_VERIFY = ?, MO_ETC = ?, MO_STATUS = ?, MO_OSCODE = ? WHERE MO_NO = ?;
UPDATE MOBILE_IMAGE SET MI_FRONTNAME = ?, MI_BACKNAME = ?, MI_PATH = ?, MI_UPDATE = SYSDATE WHERE REF_MO_NO = ?

UPDATE MOBILE_IMAGE SET MI_FRONTNAME = 'aaa', MI_BACKNAME = 'aaa', MI_PATH = 'aaa', MI_UPDATE = SYSDATE WHERE REF_MO_NO = 5;

ALTER TABLE MOBILE MODIFY(MO_code VARCHAR2(400)); 